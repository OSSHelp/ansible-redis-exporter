---
- name: check if binary file exists
  stat:
    path: "{{ redis_exporter_dirs.binary_dir }}/redis_exporter"
  register: binary_file

- name: download tar.gz
  get_url:
    url: "{{ redis_exporter_targz_url }}"
    dest: "/tmp/redis_exporter-v{{ redis_exporter_version }}.linux-amd64.tar.gz"
    checksum: "{{ redis_exporter_targz_sums }}"
  when: not binary_file.stat.exists

- name: "extract binary to {{ redis_exporter_dirs.binary_dir }}"
  unarchive:
    src: "/tmp/redis_exporter-v{{ redis_exporter_version }}.linux-amd64.tar.gz"
    dest: "{{ redis_exporter_dirs.binary_dir }}"
    owner: root
    group: root
    remote_src: yes
    extra_opts:
      - --strip-components=1
      - "redis_exporter-v{{ redis_exporter_version }}.linux-amd64/redis_exporter"
  when: not binary_file.stat.exists

- name: remove tar.gz
  file:
    path: "/tmp/redis_exporter-v{{ redis_exporter_version }}.linux-amd64.tar.gz"
    state: absent
  when: not binary_file.stat.exists

- name: create user
  user:
    name: "{{ redis_exporter_user_name }}"
    home: "/nonexistent"
    create_home: no
    shell: "/bin/false"
    system: yes

- name: create systemd unit
  template:
    src: redis_exporter.service.j2
    dest: "{{ redis_exporter_systemd_unit }}"
  notify:
    - reload redis_exporter unit
    - restart redis_exporter service

- name: create config dir
  file:
    path: "{{ redis_exporter_dirs.config_dir }}"
    state: directory

- name: create main config placeholder if doesn't exist
  copy:
    content: ""
    dest: "{{ redis_exporter_dirs.config_dir }}/{{ redis_exporter_config_file }}"
    force: no
    owner: root
    group: "{{ redis_exporter_user_name }}"
    mode: 0640

- meta: flush_handlers

- name: enable service
  systemd:
    name: "{{ redis_exporter_service_name }}"
    enabled: true
